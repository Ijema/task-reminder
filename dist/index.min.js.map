{"version":3,"sources":["index.js"],"names":["alarmIntervalId","new_task","document","getElementById","task_menu_name","new_task_list","start_id","select_id","name","task","is_completed","id","change_task","index","app_data","findIndex","value","setReminder","checkAlarm","Math","max","length","grabDate","grabTime","resetReminder","style","display","startReminder","set_task","set_task_list","content","i","innerHTML","concat","get_data","className","add_task","console","log","task_list_input","position","get_task_title","change_task_list","input_value","element","task_list_length","last_id","add_task_list","push","delete_task","refresh","splice","audioPlayer","setReminderToTask","reminder","selectedTaskName","date","dateValue","time","timeValue","reminder_id","app_reminder","find","trim","show_date_time","now","parseDate","marginTop","alarmTime","parseTime","alarmDate","Date","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","getDate","getMonth","getFullYear","getHours","getMinutes","setInterval","err","dateParts","split","year","parseInt","month","day","timeParts","minutes","hours","playAlarm","paused","play","error","message","setAlarm","clearInterval","clearAlarm","addEventListener"],"mappings":"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","file":"index.min.js","sourcesContent":["let new_task = document.getElementById('task_container');\r\nlet task_menu_name = document.getElementById('menu_left');\r\nlet new_task_list = document.getElementById('task_list_container');\r\n\r\nlet start_id = 1;\r\nlet select_id = 0;\r\nlet reminder_id = 0;\r\n// Declare alarm interval ID\r\nlet alarmIntervalId;\r\n\r\n\r\nlet app_data = [\r\n  {\r\n    name:\"Task Name\", \r\n    task:[\r\n      {name: \"Task List\", is_completed: false, id: 1},\r\n    ], \r\n    id:1\r\n  },\r\n];\r\n\r\nlet app_reminder = [];\r\n\r\n//allocates task names the value it has been assigned by the user \r\nconst change_task = id => {\r\n  const index = app_data.findIndex(task => task.id === id);\r\n\r\n  if (index !== -1) {\r\n    select_id = index;\r\n    let name = app_data[select_id].name !== \"Task Name\" ? app_data[select_id].name : \"\";\r\n\r\n    document.getElementById('task_name').value = name;\r\n    checkAlarm(); \r\n    setReminder(); // Call setReminder after setting select_id and clearing date and time fields\r\n    \r\n  } else {\r\n    select_id = Math.max(0, app_data.length - 1);\r\n    document.getElementById('task_name').value = \"\";\r\n  }\r\n  if(grabDate.value === \"\" && grabTime.value === \"\") {\r\n    // Clear and set reminder values\r\n    grabDate.value = \"\";\r\n    grabTime.value = \"\";\r\n    resetReminder.style.display = \"none\";\r\n    grabDate.style.display =\"none\";\r\n    grabTime.style.display = \"none\";\r\n    startReminder.style.display = \"inline-block\";\r\n  }\r\n  else{\r\n    resetReminder.style.display = \"inline-block\";\r\n    grabDate.style.display =\"inline-block\";\r\n    grabTime.style.display = \"inline-block\";\r\n  }\r\n  set_task();\r\n  set_task_list();\r\n};\r\n\r\n\r\n\r\n\r\n// gets tasks from the temporary database and displays tasks on the page\r\nconst set_task = () => {\r\n  let content = '';\r\n\r\n  for(let i=0; i < app_data.length; i++){\r\n    let get_data = app_data[i];\r\n    const className = get_data.id - 1 == select_id ? \"task active\" : \"task\";\r\n    content += `\r\n                <div onclick = \"change_task(${get_data.id})\" class=\"${className}\">\r\n                  ${get_data.name}\r\n                </div>`;\r\n\r\n  }\r\n  new_task.innerHTML = content;\r\n  task_menu_name.innerHTML = app_data[select_id].name;\r\n\r\n}\r\n\r\n// creates a new task and pushes it to the temporary database app_data\r\nconst add_task = () => {\r\n  start_id = app_data.length > 0 ? app_data[app_data.length - 1].id + 1 : 1;\r\n\r\n  app_data.push({\r\n    name: \"Task Name\",\r\n    task: [{ name: \"Task List\", is_completed: false, id: 1 }],\r\n    id: start_id,\r\n  });\r\n\r\n  set_task();\r\n  setReminder();\r\n  console.log(app_data);\r\n};\r\n\r\n\r\n\r\n// gets the task name when it is inputed in the main area and displays it in the menu section\r\nconst get_task_name = () => {\r\n  let get_task_title = document.getElementById('task_name').value;\r\n  app_data[select_id].name = get_task_title;\r\n\r\n  set_task();\r\n  \r\n}\r\n\r\n// grab task list names\r\nconst change_task_list = id => {\r\n  const position = id - 1;\r\n  const task_list_input = document.getElementById(\"task_list_\"+id);\r\n\r\n  app_data[select_id].task[position].name = task_list_input.value;\r\n\r\n}\r\n\r\n\r\n// fetch task lists from database\r\nconst set_task_list = () => {\r\n  let content = '';\r\n\r\n  for (let index = 0; index < app_data[select_id].task.length; index++) {\r\n    const element = app_data[select_id].task[index];\r\n\r\n    const input_value = element.name == \"Task List\" ? \"\" : element.name;\r\n\r\n    content += `<div id=\"task_list\">\r\n                <input type=\"checkbox\" name=\"task_list_name\" id=\"task_list_checkbox\">\r\n                <input type=\"text\" oninput=\"change_task_list(${element.id})\" id=\"task_list_${element.id}\" value=\"${input_value}\" placeholder=\"Task List\">\r\n              </div>`\r\n    \r\n  }\r\n  new_task_list.innerHTML = content;\r\n}\r\n\r\n// Add task_list to task page\r\nconst add_task_list = () => {\r\n  const task_list_length = app_data[select_id].task.length;\r\n  const last_id = app_data[select_id].task[task_list_length - 1].id;\r\n\r\n  app_data[select_id].task.push({name: \"Task List\", is_completed: false, id: last_id + 1});\r\n  set_task_list();\r\n}\r\n\r\n// Delete Task\r\nconst delete_task = () => {\r\n  if (app_data.length <= 1) {\r\n    alert(\"Cannot delete the last task.\");\r\n    return;\r\n  }\r\n\r\n  app_data.splice(select_id, 1); // Remove 1 element at the specified index\r\n\r\n  if (select_id >= app_data.length) {\r\n    select_id = app_data.length - 1; // Adjust select_id if it exceeds the array bounds\r\n  }\r\n\r\n  set_task();\r\n  set_task_list();\r\n  change_task(select_id + 1); // Load the next task\r\n};\r\n\r\n// Refresh Task\r\nconst refresh = () => {\r\n  app_data = [{\r\n    name:\"Task Name\", \r\n    task:[\r\n      {name: \"Task List\", is_completed: false, id: 1},\r\n    ], \r\n    id:1\r\n  },\r\n];\r\n\r\nselect_id = 0;\r\ndocument.getElementById('task_name').value=\"\";\r\ngrabDate.value = \"\";\r\ngrabTime.value = \"\";\r\nresetReminder.style.display = \"none\";\r\ngrabDate.style.display =\"none\";\r\ngrabTime.style.display = \"none\";\r\nstartReminder.style.display = \"inline-block\";\r\n\r\nset_task();\r\nset_task_list();\r\n}\r\n\r\n// display task name on reload\r\nset_task();\r\n// displays task list on reload\r\nset_task_list();\r\n\r\n// Reminder Section \r\nlet grabDate= document.getElementById('date');\r\nlet grabTime = document.getElementById('time');\r\nlet resetReminder = document.getElementById('reset');\r\nlet startReminder = document.getElementById('start_reminder');\r\nlet audioPlayer = document.getElementById('audio_player');\r\n\r\n\r\n// get the task name associated with the reminder\r\nconst setReminderToTask = () => {\r\n  const selectedTaskName = app_data[select_id].name;\r\n  const existingReminder = app_reminder.find(reminder => reminder.name === selectedTaskName);\r\n  const dateValue = grabDate.value.trim();\r\n  const timeValue = grabTime.value.trim();\r\n\r\n  if (dateValue !== '' && timeValue !== '') {\r\n    if (existingReminder) {\r\n      // existingReminder.date.push(dateValue);\r\n      // existingReminder.time.push(timeValue);\r\n    } else {\r\n      const reminder = {\r\n        name: selectedTaskName,\r\n        date: [dateValue],\r\n        time: [timeValue],\r\n        id: reminder_id + 1\r\n      };\r\n      app_reminder.push(reminder);\r\n      reminder_id++; // Increment the reminder_id for the next reminder\r\n    }\r\n\r\n    console.log(app_reminder);\r\n  }\r\n};\r\n\r\n\r\n// show date and time\r\nconst show_date_time = () => {\r\n  document.getElementById('schedule_time').style.marginTop = \"20px\";\r\n  grabDate.style.display = \"inline-block\";\r\n  grabTime.style.display = \"inline-block\";\r\n  startReminder.style.display = \"inline-block\";\r\n  resetReminder.style.display = \"inline-block\";\r\n}\r\n\r\n// Check alarm time\r\n// Function to check if alarm time is reached and play the alarm\r\nfunction checkAlarm() {\r\n  var now = new Date();\r\n  for (const reminder of app_reminder) {\r\n    for (let i = 0; i < reminder.date.length; i++) {\r\n      var alarmDate = parseDate(reminder.date[i]);\r\n      var alarmTime = parseTime(reminder.time[i]);\r\n\r\n      if (\r\n        alarmDate &&\r\n        alarmTime &&\r\n        alarmDate.getDate() === now.getDate() &&\r\n        alarmDate.getMonth() === now.getMonth() &&\r\n        alarmDate.getFullYear() === now.getFullYear() &&\r\n        alarmTime.getHours() === now.getHours() &&\r\n        alarmTime.getMinutes() === now.getMinutes()\r\n      ) {\r\n        // Alarm time reached for the current reminder\r\n        playAlarm();\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Set interval to check the alarm every second\r\nsetInterval(checkAlarm, 1000);\r\n\r\n\r\n\r\n// Parse date value\r\nfunction parseDate(dateValue) {\r\n  if (typeof dateValue !== 'string' || dateValue.trim() === '') {\r\n    return null;\r\n  }\r\n\r\n  var dateParts = dateValue.split(\"-\");\r\n  if (dateParts.length === 3) {\r\n    var year = parseInt(dateParts[0]);\r\n    var month = parseInt(dateParts[1]) - 1; // Months are zero-based (0-11)\r\n    var day = parseInt(dateParts[2]);\r\n    return new Date(year, month, day);\r\n  }\r\n  return null;\r\n}\r\n\r\n// Parse time value\r\nfunction parseTime(timeValue) {\r\n  if (typeof timeValue !== 'string' || timeValue.trim() === '') {\r\n    return null;\r\n  }\r\n\r\n  var timeParts = timeValue.split(\":\");\r\n  if (timeParts.length === 2) {\r\n    var hours = parseInt(timeParts[0]);\r\n    var minutes = parseInt(timeParts[1]);\r\n    return new Date(1970, 0, 1, hours, minutes);\r\n  }\r\n  return null;\r\n}\r\n\r\n// Play alarm sound\r\nfunction playAlarm() {\r\n  if (audioPlayer.paused) {\r\n    audioPlayer.play().catch(function (error) {\r\n      console.log(\"Failed to play the audio: \" + error.message);\r\n    });\r\n  }\r\n}\r\n\r\n// Set the alarm\r\nfunction setAlarm() {\r\n  var alarmDate = parseDate(grabDate.value);\r\n  var alarmTime = parseTime(grabTime.value);\r\n\r\n  // Clear any existing alarm interval\r\n  clearInterval(alarmIntervalId);\r\n\r\n  // Set new alarm interval to check every second\r\n  alarmIntervalId = setInterval(checkAlarm, 1000);\r\n\r\n  if (alarmDate && alarmTime) {\r\n    console.log(\"Alarm set for: \" + alarmDate + \" \" + alarmTime);\r\n  } else {\r\n    console.log(\"Invalid date or time format\");\r\n  }\r\n\r\n  setReminderToTask();\r\n}\r\n\r\n\r\n// Clear the alarm\r\nfunction clearAlarm() {\r\n  const selectedTaskName = app_data[select_id].name;\r\n  const reminder = app_reminder.find(reminder => reminder.name === selectedTaskName);\r\n\r\n  clearInterval(alarmIntervalId);\r\n  if (audioPlayer) {\r\n    audioPlayer.pause();\r\n    audioPlayer.currentTime = 0;\r\n    grabDate.value = \"\";\r\n    grabTime.value = \"\";\r\n    grabDate.style.display = \"none\";\r\n    grabTime.style.display = \"none\";\r\n    resetReminder.style.display = \"none\";\r\n    reminder.date = \"\";\r\n    reminder.time = \"\";\r\n  }\r\n}\r\n\r\n\r\n// Attach event listeners\r\nstartReminder.addEventListener(\"click\", setAlarm);\r\nresetReminder.addEventListener(\"click\", clearAlarm);\r\n\r\n\r\n// change reminder time base on the task selected\r\nconst setReminder = () => {\r\n  const selectedTaskName = app_data[select_id].name;\r\n  const reminder = app_reminder.find(reminder => reminder.name === selectedTaskName);\r\n\r\n  if (reminder && reminder.date && reminder.time) {\r\n    grabDate.value = reminder.date; // Assuming grabDate is an input field\r\n    grabTime.value = reminder.time; // Assuming grabTime is an input field\r\n    startReminder.style.display = \"none\";\r\n  } else {\r\n    grabDate.value = \"\";\r\n    grabTime.value = \"\";\r\n  }\r\n};\r\n\r\n\r\n\r\n"]}